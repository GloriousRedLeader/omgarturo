# Razor Enhanced Scripts for Ultima Online by
#   GRL  
#   https://github.com/GloriousRedLeader/omgarturo
#   2025-09-17
# Use at your own risk. 
#
# This file was auto-generated by the import inliner.
# Original dependencies from fm_core have been inlined below.

# ===============================================
# External Imports
# ===============================================
from System import Byte, Int32
from System.Collections.Generic import List
from ctypes import wintypes
import ctypes
import sys
import time

# ===============================================
# Inlined Dependencies (topologically sorted)
# ===============================================

# AXE_STATIC_IDS (from core_items.py)
AXE_STATIC_IDS = [0x0F49, 0x0F47]

# BLUE_BEETLE_MOBILE_ID (from core_mobiles.py)
BLUE_BEETLE_MOBILE_ID = 0x0317

# BOARD_STATIC_IDS (from core_items.py)
BOARD_STATIC_IDS = [0x1BD7]

# FIRE_BEETLE_MOBILE_ID (from core_mobiles.py)
FIRE_BEETLE_MOBILE_ID = 0x00A9

# LOG_STATIC_IDS (from core_items.py)
LOG_STATIC_IDS = [0x1BDD]

# RESOURCE_HUE_ASH (from core_items.py)
RESOURCE_HUE_ASH = 0x04a7

# RESOURCE_HUE_BLOODWOOD (from core_items.py)
RESOURCE_HUE_BLOODWOOD = 0x04aa

# RESOURCE_HUE_DEFAULT (from core_items.py)
RESOURCE_HUE_DEFAULT = 0x0000

# RESOURCE_HUE_FROSTWOOD (from core_items.py)
RESOURCE_HUE_FROSTWOOD = 0x047f

# RESOURCE_HUE_HEARTWOOD (from core_items.py)
RESOURCE_HUE_HEARTWOOD = 0x04a9

# RESOURCE_HUE_OAK (from core_items.py)
RESOURCE_HUE_OAK = 0x07da

# RESOURCE_HUE_YEW (from core_items.py)
RESOURCE_HUE_YEW = 0x04a8

# TREE_STATIC_IDS (from core_items.py)
TREE_STATIC_IDS = [ 0x0C95, 0x0C96, 0x0C99, 0x0C9B, 0x0C9C, 0x0C9D, 0x0C8A, 0x0CA6,
    0x0CA8, 0x0CAA, 0x0CAB, 0x0CC3, 0x0CC4, 0x0CC8, 0x0CC9, 0x0CCB,
    0x0CCC, 0x0CCD, 0x0CD0, 0x0CD3, 0x0CD6, 0x0CD8, 0x0CDA, 0x0CDD, 0x0CE0,
    0x0CE3, 0x0CE6, 0x0CF8, 0x0CFB, 0x0CFE, 0x0D01, 0x0D25, 0x0D27, 0x0D35,
    0x0D37, 0x0D38, 0x0D42, 0x0D43, 0x0D59, 0x0D70, 0x0D85, 0x0D94, 0x0D96,
    0x0D98, 0x0D9A, 0x0D9C, 0x0D9E, 0x0DA0, 0x0DA2, 0x0DA4, 0x0DA8 ]

# Tree (from core_gathering.py)
class Tree:
    def __init__(self, x, y, z, staticId):
        self.x = x
        self.y = y
        self.z = z
        self.staticId = staticId
        self.tooFarAwayAttempts = 0
        
    def __str__(self):
        return f"Tree(x='{self.x}', y='{self.y}', z='{self.z}', staticId={self.staticId})"                        

# cut_tree (from core_gathering.py)
def cut_tree(tree, tool, cutDelayMs):
    Target.Cancel()
    Misc.Pause(int(cutDelayMs / 2))
        
    if Player.MaxWeight - Player.Weight < 50:
        print("You are too heavy!")
        sys.exit()
    
    Journal.Clear()
    Items.UseItem(tool)
    Target.WaitForTarget(4000)
    print("Cutting tree {}".format(tree), 66)
    Target.TargetExecute(tree.x, tree.y, tree.z, tree.staticId)
    Misc.Pause(cutDelayMs)
    
    if Journal.Search("There's not enough wood here to harvest."):# '
        print("(no more wood) Moving on")
    elif Journal.Search("That is too far away"):
        tree.tooFarAwayAttempts = tree.tooFarAwayAttempts + 1
        Journal.Clear()
        if (tree.tooFarAwayAttempts < 5):
            #cut_tree(tree, tool, cutDelayMs)
            return True
        else:
            print("(cant reach tree) Moving on")
            return False
    else:
        #cut_tree(tree, tool, cutDelayMs)
        return True

# equip_weapon (from core_player.py)
def equip_weapon(newItem):
    leftHand = Player.GetItemOnLayer("LeftHand")
    if leftHand != None:
        Player.UnEquipItemByLayer("LeftHand", True)    
        Misc.Pause(1000)      
        
    rightHand = Player.GetItemOnLayer("RightHand")        
    if rightHand != None:
        Player.UnEquipItemByLayer("RightHand", True)    
        Misc.Pause(1000)      
    
    Player.EquipItem(newItem)    
    Misc.Pause(1000)      
    return [leftHand, rightHand]

# find_all_in_container_by_id (from core_player.py)
def find_all_in_container_by_id(itemID, containerSerial = Player.Backpack.Serial):
    return Items.FindAllByID(itemID, -1, containerSerial, 1)

# find_in_container_by_id (from core_player.py)
def find_in_container_by_id(itemID, containerSerial = Player.Backpack.Serial, color = -1, ignoreContainer = [], recursive = False):
    ignoreColor = False
    if color == -1:
        ignoreColor = True
        
    container = Items.FindBySerial(containerSerial)

    if isinstance( itemID, int ):
        foundItem = next( ( item for item in container.Contains if ( item.ItemID == itemID and ( ignoreColor or item.Hue == color ) ) ), None )
    elif isinstance( itemID, list ):
        foundItem = next( ( item for item in container.Contains if ( item.ItemID in itemID and ( ignoreColor or item.Hue == color ) ) ), None )
    else:
        raise ValueError( 'Unknown argument type for itemID passed to FindItem().', itemID, container )

    if foundItem != None:
        return foundItem        
    elif recursive == True:
        for item in container.Contains:
            if item.IsContainer:
                foundItem = find_in_container_by_id(itemID, containerSerial = item.Serial, color = color, ignoreContainer = ignoreContainer, recursive = recursive)
                if foundItem != None:
                    return foundItem

# find_in_hands_by_id (from core_player.py)
def find_in_hands_by_id(itemID): 
    leftHand = Player.GetItemOnLayer("LeftHand")
    if leftHand != None and leftHand.ItemID == itemID:
        return leftHand
    rightHand = Player.GetItemOnLayer("RightHand")
    if rightHand != None and rightHand.ItemID == itemID:
        return rightHand
    return None

# get_pets (from core_mobiles.py)
def get_pets(range = 10, checkLineOfSight = True, mobileId = None):
    pets = []
    fil = Mobiles.Filter()
    fil.Enabled = True
    fil.RangeMax = range
    fil.Notorieties = List[Byte](bytes([1, 2]))
    fil.IsGhost = False
    fil.Friend = False
    fil.CheckLineOfSight = checkLineOfSight
    
    if mobileId is not None:
        fil.Bodies = List[Int32]([mobileId])
    
    blues = Mobiles.ApplyFilter(fil)    
    for blue in blues:
        if blue.CanRename:
            pets.append(blue)
    return pets

# get_tile_behind (from core_rails.py)
def get_tile_behind(distance = 1):
    direction = Player.Direction
    tileX = Player.Position.X
    tileY = Player.Position.Y
    
    if Player.Direction == 'Up':
        tileX = Player.Position.X + distance
        tileY = Player.Position.Y + distance
    elif Player.Direction == 'North':
        tileY = Player.Position.Y + distance
    elif Player.Direction == 'Right':
        tileX = Player.Position.X - distance
        tileY = Player.Position.Y + distance
    elif Player.Direction == 'East':
        tileX = Player.Position.X - distance
    elif Player.Direction == 'Down':
        tileX = Player.Position.X - distance
        tileY = Player.Position.Y - distance
    elif Player.Direction == 'South':
        tileY = Player.Position.Y - distance
    elif Player.Direction == 'Left':
        tileX = Player.Position.X + distance
        tileY = Player.Position.Y - distance
    elif Player.Direction == 'West':
        tileX = Player.Position.X + distance

    return tileX, tileY, Player.Position.Z

# go_to_tile (from core_rails.py)
def go_to_tile(
    # Desired X coordinate to travel to. Typically a mobile X.
    x, 
    
    # Desired Y coordinate to travel to. Typically a mobile Y.
    y, 
    
    # Number of seconds to attempt travel. Blocks until we arrive or this many seconds elapses.
    timeoutSeconds = -1, 
    
    # Value of 0 means land right on x, y. This is the default behavior. Positive value means stop 
    # short of the provided x, y by that many tiles. This is useful for casters or anyone who 
    # doesnt wish to be directly on top of a mobile.
    tileOffset = 0
):
    if Player.Position.X == x and Player.Position.Y == y:
        return True
        
    start_time = time.time()
    
    if tileOffset > 0:
        tiles = PathFinding.GetPath(x, y, True)
        numTiles = len(tiles) if tiles is not None else 0
        
        if numTiles - tileOffset > 1:
            # There is a duplicate of last tile entry. Its in there twice.
            tileIndex = numTiles - tileOffset - 2
            x = tiles[tileIndex].X
            y = tiles[tileIndex].Y
        else:
            return True
        
    route = PathFinding.Route() 
    route.X = x
    route.Y = y
    route.MaxRetry = 3
    route.IgnoreMobile = True
    route.Timeout = timeoutSeconds
    res = PathFinding.Go(route)
    
    #total = "{:.2f}".format(time.time() - start_time)
    return res  

# cut_logs_to_boards (from core_gathering.py)
def cut_logs_to_boards(axe, itemMoveDelayMs):    
    for logStaticID in LOG_STATIC_IDS:
        logs = find_all_in_container_by_id(logStaticID, containerSerial = Player.Backpack.Serial)
        for log in logs:
            Items.UseItem(axe)
            Target.WaitForTarget(10000, False)
            Target.TargetExecute(log.Serial)
            Misc.Pause(itemMoveDelayMs)    

# drop_unwanted_resources (from core_gathering.py)
def drop_unwanted_resources(itemStaticIds, keepItemHues, itemMoveDelayMs):    
    for itemStaticId in itemStaticIds:
        resources = find_all_in_container_by_id(itemStaticId, containerSerial = Player.Backpack.Serial)
        for resource in resources:
            if resource.Color not in keepItemHues:
                print("Dropping {} on ground".format(resource.Name))
                tileX, tileY, tileZ = get_tile_behind(2)
                Items.MoveOnGround(resource, resource.Amount, tileX, tileY, tileZ)
                Misc.Pause(itemMoveDelayMs)

# find_first_in_container_by_ids (from core_player.py)
def find_first_in_container_by_ids(itemIDs, containerSerial = Player.Backpack.Serial):
    for itemID in itemIDs:
        item = find_in_container_by_id(itemID, containerSerial)
        if item != None:
            return item
    return None

# find_first_in_hands_by_ids (from core_player.py)
def find_first_in_hands_by_ids(itemIDs):
    for itemID in itemIDs:
        item = find_in_hands_by_id(itemID)
        if item != None:
            return item
    return None    

# move_items_to_pack_animal (from core_gathering.py)
def move_items_to_pack_animal(itemIds, packAnimalMobileId, itemMoveDelayMs):
    for itemId in itemIds:
        for item in Items.FindAllByID(itemId, -1, Player.Backpack.Serial, 0):
            packAnimals = get_pets(range = 2, checkLineOfSight = True, mobileId = packAnimalMobileId)
            
            if len(packAnimals) == 0:
                return
        
            for packAnimal in packAnimals:
                if packAnimal.Backpack.Weight < 1350:
                    print("Moving {} to {} (Weight: {})".format(item.Name, packAnimal.Name, packAnimal.Backpack.Weight))
                    Items.Move(item, packAnimal.Backpack.Serial, item.Amount)
                    Misc.Pause(itemMoveDelayMs)

# scan_trees (from core_gathering.py)
def scan_trees(tileRange, treeStaticIds):
    minx = Player.Position.X - tileRange
    maxx = Player.Position.X + tileRange
    miny = Player.Position.Y - tileRange
    maxy = Player.Position.Y + tileRange

    trees = []
    while miny <= maxy:
        while minx <= maxx:
            tileinfo = Statics.GetStaticsTileInfo(minx, miny, Player.Map)
            if tileinfo.Count > 0:
                for tile in tileinfo:
                    for staticid in treeStaticIds:
                        if staticid == tile.StaticID:
                            tree = Tree(minx, miny, tile.StaticZ, tile.StaticID)
                            trees.append(tree)
                            print("Tree Registered: {}".format(tree))

            minx = minx + 1
        minx = Player.Position.X - tileRange            
        miny = miny + 1

    Misc.SendMessage('Total Trees: %i' % (len(trees)), 66) 
    return trees

# run_lumberjacking_loop (from core_gathering.py)
def run_lumberjacking_loop(

    # (Optional) Makes a square tileRange * tileRange and will search for trees inside of it. So,
    # all you have to do is place yourself near a bunch of trees and hit the hotkey that
    # runs this function.
    tileRange = 10, 
    
    # (Optional) If this limit is reached, the script just stops apparently.
    #weightLimit = 500, 
    
    # (Optional) Flag that will convert the logs into boards. I think you need an axe.
    cutLogsToBoards = True, 

    # (Optional) Only keep logs and boards that match these hues. By default that is all hues. Remove the ones
    # you wish to discard. It will drop them at your feet. It is a common case where you may not care
    # about the basic wood board (RESOURCE_HUE_DEFAULT), so remove that from the list if you only
    # want special woods.
    keepItemHues = [RESOURCE_HUE_DEFAULT, RESOURCE_HUE_OAK, RESOURCE_HUE_ASH, RESOURCE_HUE_YEW, RESOURCE_HUE_HEARTWOOD, RESOURCE_HUE_BLOODWOOD, RESOURCE_HUE_FROSTWOOD    ],
    
    # (Optional) The mobile ID of your pack animal. Defaults to blue beetle.
    packAnimalMobileId = BLUE_BEETLE_MOBILE_ID,
    
    # Ids of static tile graphics that we consider trees. May vary.
    # Default is all the trees I know about.
    treeStaticIds = TREE_STATIC_IDS,
    
    # (Optional) Number of miliseconds between item moves typically from one pack to another.
    itemMoveDelayMs = 1000,
    
    # (Optional) Number of miliseconds between chopping attempts. Reducing will make
    # script go faster.
    cutDelayMs = 2000
):

    axe = find_first_in_hands_by_ids(AXE_STATIC_IDS)
    if axe is None:
        print("Equipping axe")
        axe = find_first_in_container_by_ids(AXE_STATIC_IDS)
        equip_weapon(axe)
        
    axe = find_first_in_hands_by_ids(AXE_STATIC_IDS)
    if axe is None:
        print("Could not find axe!")
        return
        
    trees = scan_trees(tileRange, treeStaticIds)
    print("Total tree number {}".format(len(trees)))
    
    for tree in trees:
        print("Moving to a tree")

        drop_unwanted_resources(BOARD_STATIC_IDS + LOG_STATIC_IDS, keepItemHues, itemMoveDelayMs) 

        if cutLogsToBoards:
            cut_logs_to_boards(axe, itemMoveDelayMs)
        
        move_items_to_pack_animal(BOARD_STATIC_IDS, packAnimalMobileId, itemMoveDelayMs)
        
        go_to_tile(tree.x - 1, tree.y - 1, 10.0)
        
        #cut_tree(tree, axe, cutDelayMs)
        while cut_tree(tree, axe, cutDelayMs) == True:
            drop_unwanted_resources(BOARD_STATIC_IDS + LOG_STATIC_IDS, keepItemHues, itemMoveDelayMs) 

            if cutLogsToBoards:
                cut_logs_to_boards(axe, itemMoveDelayMs)
        
            move_items_to_pack_animal(BOARD_STATIC_IDS, packAnimalMobileId, itemMoveDelayMs)
            
        
        Misc.Pause(int(itemMoveDelayMs / 3))

    #cut_or_drop_logs(axe, keepItemHues, cutLogsToBoards, itemMoveDelayMs)
    #move_items_to_pack_animal(BOARD_STATIC_IDS, packAnimalMobileId, itemMoveDelayMs)        
    drop_unwanted_resources(BOARD_STATIC_IDS + LOG_STATIC_IDS, keepItemHues, itemMoveDelayMs) 

    if cutLogsToBoards:
        cut_logs_to_boards(axe, itemMoveDelayMs)
    
    move_items_to_pack_animal(BOARD_STATIC_IDS, packAnimalMobileId, itemMoveDelayMs)    
    
    print("All done")

# ===============================================
# Main Script Code
# ===============================================
#run_lumberjacking_loop(tileRange = 12, weightLimit = 425, cutLogsToBoards = True, dropOnGround = False, packAnimalNames = ["one"])

# Makes a box around where player is standing and chops trees inside. The
# size of the box is determined by tileRange.
# You will need an axe equipped I believe.
run_lumberjacking_loop(

    # (Optional) Makes a square tileRange * tileRange and will search for trees inside of it. So,
    # all you have to do is place yourself near a bunch of trees and hit the hotkey that
    # runs this function.
    tileRange = 30, 
    
    # (Optional) Flag that will convert the logs into boards. I think you need an axe.
    cutLogsToBoards = True, 

    # (Optional) Only keep logs and boards that match these hues. By default that is all hues. Remove the ones
    # you wish to discard. It will drop them at your feet. It is a common case where you may not care
    # about the basic wood board (RESOURCE_HUE_DEFAULT), so remove that from the list if you only
    # want special woods.
    keepItemHues = [RESOURCE_HUE_OAK, RESOURCE_HUE_ASH, RESOURCE_HUE_YEW, RESOURCE_HUE_HEARTWOOD, RESOURCE_HUE_BLOODWOOD, RESOURCE_HUE_FROSTWOOD    ],
    
    # (Optional) The mobile ID of your pack animal. Defaults to blue beetle.
    packAnimalMobileId = BLUE_BEETLE_MOBILE_ID,
    
    # Ids of static tile graphics that we consider trees. May vary.
    # Default is all the trees I know about.
    treeStaticIds = TREE_STATIC_IDS,
    
    # (Optional) Number of miliseconds between item moves typically from one pack to another.
    itemMoveDelayMs = 1000,
    
    # (Optional) Number of miliseconds between chopping attempts. Reducing will make
    # script go faster.
    cutDelayMs = 2000
)
