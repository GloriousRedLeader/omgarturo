# Razor Enhanced Scripts for Ultima Online by
#   GRL  
#   https://github.com/GloriousRedLeader/omgarturo
#   2025-09-17
# Use at your own risk. 
#
# This file was auto-generated by the import inliner.
# Original dependencies from fm_core have been inlined below.

# ===============================================
# External Imports
# ===============================================
from System import Byte, Int32
from System.Collections.Generic import List
from ctypes import wintypes
import ctypes
import sys
import time

# ===============================================
# Inlined Dependencies (topologically sorted)
# ===============================================

# AXE_STATIC_IDS (from core_items.py)
AXE_STATIC_IDS = [0x0F49, 0x0F47]

# BOARD_STATIC_IDS (from core_items.py)
BOARD_STATIC_IDS = [0x1BD7]

# DAGGER_STATIC_IDS (from core_items.py)
DAGGER_STATIC_IDS = [0x0F52]

# INGOT_STATIC_IDS (from core_items.py)
INGOT_STATIC_IDS = [0x1BF2]

# LOG_STATIC_IDS (from core_items.py)
LOG_STATIC_IDS = [0x1BDD]

# MINER_TOOLS_STATIC_IDS (from core_items.py)
MINER_TOOLS_STATIC_IDS = [0x0F39, 0x0E86]

# ORE_STATIC_IDS (from core_items.py)
ORE_STATIC_IDS = [
    0x19B7, 
    0x19BA, 
    0x19B8, 
    0x19B9, 
    0x0000, 
    0x0415, 
    0x045F, 
    0x06D8, 
    0x0455, 
    0x06B7, 
    0x097E, 
    0x07D2, 
    0x0544 ,
    
    0x096D,
    #0x19B7
]

# SAND_STATIC_IDS (from core_items.py)
SAND_STATIC_IDS = [0x423A]

# STONE_STATIC_IDS (from core_items.py)
STONE_STATIC_IDS = [0x1779]

# TREE_STATIC_IDS (from core_items.py)
TREE_STATIC_IDS = [ 0x0C95, 0x0C96, 0x0C99, 0x0C9B, 0x0C9C, 0x0C9D, 0x0C8A, 0x0CA6,
    0x0CA8, 0x0CAA, 0x0CAB, 0x0CC3, 0x0CC4, 0x0CC8, 0x0CC9, 0x0CCB,
    0x0CCC, 0x0CCD, 0x0CD0, 0x0CD3, 0x0CD6, 0x0CD8, 0x0CDA, 0x0CDD, 0x0CE0,
    0x0CE3, 0x0CE6, 0x0CF8, 0x0CFB, 0x0CFE, 0x0D01, 0x0D25, 0x0D27, 0x0D35,
    0x0D37, 0x0D38, 0x0D42, 0x0D43, 0x0D59, 0x0D70, 0x0D85, 0x0D94, 0x0D96,
    0x0D98, 0x0D9A, 0x0D9C, 0x0D9E, 0x0DA0, 0x0DA2, 0x0DA4, 0x0DA8 ]

# find_all_in_container_by_id (from core_player.py)
def find_all_in_container_by_id(itemID, containerSerial = Player.Backpack.Serial):
    return Items.FindAllByID(itemID, -1, containerSerial, 1)

# find_first_in_container_by_name (from core_player.py)
def find_first_in_container_by_name(itemName, containerSerial = Player.Backpack.Serial):
    return Items.FindByName(itemName, -1, containerSerial, 1)

# find_in_container_by_id (from core_player.py)
def find_in_container_by_id(itemID, containerSerial = Player.Backpack.Serial, color = -1, ignoreContainer = [], recursive = False):
    ignoreColor = False
    if color == -1:
        ignoreColor = True
        
    container = Items.FindBySerial(containerSerial)

    if isinstance( itemID, int ):
        foundItem = next( ( item for item in container.Contains if ( item.ItemID == itemID and ( ignoreColor or item.Hue == color ) ) ), None )
    elif isinstance( itemID, list ):
        foundItem = next( ( item for item in container.Contains if ( item.ItemID in itemID and ( ignoreColor or item.Hue == color ) ) ), None )
    else:
        raise ValueError( 'Unknown argument type for itemID passed to FindItem().', itemID, container )

    if foundItem != None:
        return foundItem        
    elif recursive == True:
        for item in container.Contains:
            if item.IsContainer:
                foundItem = find_in_container_by_id(itemID, containerSerial = item.Serial, color = color, ignoreContainer = ignoreContainer, recursive = recursive)
                if foundItem != None:
                    return foundItem

# get_friends_by_names (from core_mobiles.py)
def get_friends_by_names (friendNames = [], range = 8):
    fil = Mobiles.Filter()
    fil.Enabled = True
    fil.RangeMax = range
    fil.Notorieties = List[Byte](bytes([1, 2]))
    fil.IsGhost = False
    fil.Friend = False
    fil.CheckLineOfSight = True
    mobs = Mobiles.ApplyFilter(fil)

    #listValid = [m.Serial for m in mobs if m.Name in friendNames]

    if len(mobs) > 0:
        mobsList = List[type(mobs[0])]([mob for mob in mobs if mob.Name in friendNames])
        return mobsList    
    
    
    #if len(listValid) == 0:
    #    return []

    #fil = Mobiles.Filter()
    #fil.Enabled = True
    #for l in listValid:
    #    fil.Serials.Add(l)
    #fil.RangeMax = range
    #fil.Notorieties = List[Byte](bytes([1, 2]))
    #fil.IsGhost = False
    #fil.Friend = False
    #fil.CheckLineOfSight = True

    mobs = Mobiles.ApplyFilter(fil)

    return mobs

# get_tile_in_front (from core_rails.py)
def get_tile_in_front(distance = 1):
    direction = Player.Direction
    playerX = Player.Position.X
    playerY = Player.Position.Y
    playerZ = Player.Position.Z
    
    if direction == 'Up':
        tileX = playerX - distance
        tileY = playerY - distance
        tileZ = playerZ
    elif direction == 'North':
        tileX = playerX
        tileY = playerY - distance
        tileZ = playerZ
    elif direction == 'Right':
        tileX = playerX + distance
        tileY = playerY - distance
        tileZ = playerZ
    elif direction == 'East':
        tileX = playerX + distance
        tileY = playerY
        tileZ = playerZ
    elif direction == 'Down':
        tileX = playerX + distance
        tileY = playerY + distance
        tileZ = playerZ
    elif direction == 'South':
        tileX = playerX
        tileY = playerY + distance
        tileZ = playerZ
    elif direction == 'Left':
        tileX = playerX - distance
        tileY = playerY + distance
        tileZ = playerZ
    elif direction == 'West':
        tileX = playerX - distance
        tileY = playerY
        tileZ = playerZ
    return tileX, tileY, tileZ

# go_to_tile (from core_rails.py)
def go_to_tile(
    # Desired X coordinate to travel to. Typically a mobile X.
    x, 
    
    # Desired Y coordinate to travel to. Typically a mobile Y.
    y, 
    
    # Number of seconds to attempt travel. Blocks until we arrive or this many seconds elapses.
    timeoutSeconds = -1, 
    
    # Value of 0 means land right on x, y. This is the default behavior. Positive value means stop 
    # short of the provided x, y by that many tiles. This is useful for casters or anyone who 
    # doesnt wish to be directly on top of a mobile.
    tileOffset = 0
):
    if Player.Position.X == x and Player.Position.Y == y:
        return True
        
    start_time = time.time()
    
    if tileOffset > 0:
        tiles = PathFinding.GetPath(x, y, True)
        numTiles = len(tiles) if tiles is not None else 0
        
        if numTiles - tileOffset > 1:
            # There is a duplicate of last tile entry. Its in there twice.
            tileIndex = numTiles - tileOffset - 2
            x = tiles[tileIndex].X
            y = tiles[tileIndex].Y
        else:
            return True
        
    route = PathFinding.Route() 
    route.X = x
    route.Y = y
    route.MaxRetry = 3
    route.IgnoreMobile = True
    route.Timeout = timeoutSeconds
    res = PathFinding.Go(route)
    
    #total = "{:.2f}".format(time.time() - start_time)
    return res  

# move (from core_rails.py)
def move(x):
    for _ in range(x):
        Player.Run(Player.Direction)
        Misc.Pause(200)

# move_all_items_from_container (from core_player.py)
def move_all_items_from_container(sourceSerial, destinationSerial):
    for item in Items.FindBySerial(sourceSerial).Contains:
        Player.HeadMessage(455, "Moving item {}".format(item.Name))
        Items.Move(item, destinationSerial, item.Amount)
        Misc.Pause(800)

# move_item_to_container (from core_player.py)
def move_item_to_container(item, destinationSerial):
    Items.Move(item, destinationSerial, item.Amount)
    Misc.Pause(800)

# find_first_in_container_by_ids (from core_player.py)
def find_first_in_container_by_ids(itemIDs, containerSerial = Player.Backpack.Serial):
    for itemID in itemIDs:
        item = find_in_container_by_id(itemID, containerSerial)
        if item != None:
            return item
    return None

# move_item_to_container_by_id (from core_player.py)
def move_item_to_container_by_id(itemID, sourceSerial, destinationSerial, color = -1):
    while True:
        item = find_in_container_by_id(itemID, sourceSerial, color = color, ignoreContainer = [])
        if item is not None:
            move_item_to_container(item, destinationSerial)
        else:
            break

# ===============================================
# Main Script Code
# ===============================================
# Razor Enhanced Scripts for Ultima Online by
#   GRL  
#   https://github.com/GloriousRedLeader/omgarturo
#   2024-11-21
# Use at your own risk. 

from System.Collections.Generic import List
import sys
from System import Byte, Int32
from Scripts.omgarturo.fm_core.core_player import find_first_in_container_by_ids
from Scripts.omgarturo.fm_core.core_player import find_first_in_hands_by_id
from Scripts.omgarturo.fm_core.core_player import move_all_items_from_container
from Scripts.omgarturo.fm_core.core_player import move_item_to_container_by_id
from Scripts.omgarturo.fm_core.core_player import find_in_container_by_id
from Scripts.omgarturo.fm_core.core_player import find_first_in_container_by_name
from Scripts.omgarturo.fm_core.core_player import find_all_in_container_by_id
from Scripts.omgarturo.fm_core.core_player import move_item_to_container
from Scripts.omgarturo.fm_core.core_mobiles import get_friends_by_names
from Scripts.omgarturo.fm_core.core_rails import move
from Scripts.omgarturo.fm_core.core_rails import go_to_tile
from Scripts.omgarturo.fm_core.core_rails import get_tile_in_front
from Scripts.omgarturo.fm_core.core_items import AXE_STATIC_IDS
from Scripts.omgarturo.fm_core.core_items import LOG_STATIC_IDS
from Scripts.omgarturo.fm_core.core_items import TREE_STATIC_IDS
from Scripts.omgarturo.fm_core.core_items import DAGGER_STATIC_IDS
from Scripts.omgarturo.fm_core.core_items import BOARD_STATIC_IDS
from Scripts.omgarturo.fm_core.core_items import MINER_TOOLS_STATIC_IDS
from Scripts.omgarturo.fm_core.core_items import ORE_STATIC_IDS
from Scripts.omgarturo.fm_core.core_items import INGOT_STATIC_IDS
from Scripts.omgarturo.fm_core.core_items import STONE_STATIC_IDS
from Scripts.omgarturo.fm_core.core_items import SAND_STATIC_IDS

# Auto skinner
# Just storing this. Original author: https://razorenhanced.net/dokuwiki/doku.php?id=toolscripts
   
import sys
from System.Collections.Generic import List

self_pack = Player.Backpack.Serial
##Types
corpse = 0x2006
uncutleather = 0x1079
scalesType = 0x26B4
scissorsType = 0x0F9F

##lists
bladeList = [0x2D20, 0xf52, 0xec4, 0x13f6, 0xec3]
leathersList = List[Int32]((0x1081))
ignore = []

def scan():
    skin = Items.Filter()
    skin.Enabled = True
    
    skin.RangeMin = 0
    skin.RangeMax = 2
    skin.IsCorpse = True

    skins = Items.ApplyFilter(skin)
    for toskin in skins:
        if toskin:
            if not toskin.Serial in ignore:
                Misc.SendMessage( 'Corpse found', 20 )
                skinLoot(toskin)
                ignore.append(toskin.Serial)
                Misc.Pause(1100)
        
    else :
        Misc.SendMessage( 'No corpse', 20 )

    
    
    
    

# Helper Functions
###################################
def getByItemID(itemid, source):
    #find an item id in container serial
    for item in Items.FindBySerial(source).Contains:
        if item.ItemID == itemid:
            return item
        else:
            Misc.NoOperation()
###################################

def getBlade():
    for item in bladeList:
        blade = getByItemID(item, self_pack)
        if blade is not None:
            return blade
            
def getLeatherFromGround():
    leatherFilter = Items.Filter()
    leatherFilter.Enabled = True
    leatherFilter.OnGround = True
    leatherFilter.Movable = True
    leatherFilter.Graphics = leathersList
    leatherFilter.RangeMax = 2
    
    leathers = Items.ApplyFilter(leatherFilter)
    Misc.SendMessage
    for leather in leathers:
        Items.Move(leather.Serial, self_pack, 100)
        Misc.Pause(700)

def skinLoot(x):
    corpse = x
    if corpse:
        Items.UseItem(corpse)
        Misc.Pause(550)
        for item in bladeList:
            blade = getBlade()
        if blade is not None:
            Items.UseItem(blade)
            Target.WaitForTarget(3000, True)
            Target.TargetExecute(corpse)
            Misc.Pause(1000)
        else:
            Misc.SendMessage('No Blades Found')
            #sys.exit()
    else:
        Misc.SendMessage('cantfind corpse')
        #sys.exit()
        
    leather = getByItemID(uncutleather, corpse.Serial)
    scales = getByItemID(scalesType, corpse.Serial)
    
    if scales is not None:
        Items.Move(scales, self_pack, 0)
        Misc.Pause(550)
        
    if leather is not None:
        Misc.Pause(150)
        Items.MoveOnGround(leather, 0, Player.Position.X + 1, Player.Position.Y + 1, Player.Position.Z)
        Misc.Pause(550)
        scissors = getByItemID(scissorsType, self_pack)
        if scissors is not None:
            Items.UseItem(scissors)
            Target.WaitForTarget(3000, True)
            Target.TargetExecute(leather)
            Misc.Pause(700)
        else:
            Misc.SendMessage('No Scissors Found')
            #sys.exit()
            
        getLeatherFromGround()
        
   
while True:
    scan()
    Misc.Pause(3000)
