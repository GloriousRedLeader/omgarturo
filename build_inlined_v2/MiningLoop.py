# Razor Enhanced Scripts for Ultima Online by
#   GRL  
#   https://github.com/GloriousRedLeader/omgarturo
#   2025-09-17
# Use at your own risk. 
#
# This file was auto-generated by the import inliner.
# Original dependencies from fm_core have been inlined below.

# ===============================================
# External Imports
# ===============================================
from System import Byte, Int32
from System.Collections.Generic import List
from ctypes import wintypes
import ctypes
import sys
import time

# ===============================================
# Inlined Dependencies (topologically sorted)
# ===============================================

# BLUE_BEETLE_MOBILE_ID (from core_mobiles.py)
BLUE_BEETLE_MOBILE_ID = 0x0317

# FIRE_BEETLE_MOBILE_ID (from core_mobiles.py)
FIRE_BEETLE_MOBILE_ID = 0x00A9

# INGOT_STATIC_IDS (from core_items.py)
INGOT_STATIC_IDS = [0x1BF2]

# MINER_TOOLS_STATIC_IDS (from core_items.py)
MINER_TOOLS_STATIC_IDS = [0x0F39, 0x0E86]

# ORE_STATIC_IDS (from core_items.py)
ORE_STATIC_IDS = [
    0x19B7, 
    0x19BA, 
    0x19B8, 
    0x19B9, 
    0x0000, 
    0x0415, 
    0x045F, 
    0x06D8, 
    0x0455, 
    0x06B7, 
    0x097E, 
    0x07D2, 
    0x0544 ,
    
    0x096D,
    #0x19B7
]

# RESOURCE_HUE_AGAPITE (from core_items.py)
RESOURCE_HUE_AGAPITE = 0x0979

# RESOURCE_HUE_BRONZE (from core_items.py)
RESOURCE_HUE_BRONZE = 0x0972

# RESOURCE_HUE_COPPER (from core_items.py)
RESOURCE_HUE_COPPER = 0x096d

# RESOURCE_HUE_DEFAULT (from core_items.py)
RESOURCE_HUE_DEFAULT = 0x0000

# RESOURCE_HUE_DULL_COPPER (from core_items.py)
RESOURCE_HUE_DULL_COPPER = 0x0973

# RESOURCE_HUE_GOLD (from core_items.py)
RESOURCE_HUE_GOLD = 0x08a5

# RESOURCE_HUE_SHADOW_IRON (from core_items.py)
RESOURCE_HUE_SHADOW_IRON = 0x0966

# RESOURCE_HUE_VALORITE (from core_items.py)
RESOURCE_HUE_VALORITE = 0x08ab

# RESOURCE_HUE_VERITE (from core_items.py)
RESOURCE_HUE_VERITE = 0x089f

# SAND_STATIC_IDS (from core_items.py)
SAND_STATIC_IDS = [0x423A]

# STONE_STATIC_IDS (from core_items.py)
STONE_STATIC_IDS = [0x1779]

# find_all_in_container_by_id (from core_player.py)
def find_all_in_container_by_id(itemID, containerSerial = Player.Backpack.Serial):
    return Items.FindAllByID(itemID, -1, containerSerial, 1)

# find_in_container_by_id (from core_player.py)
def find_in_container_by_id(itemID, containerSerial = Player.Backpack.Serial, color = -1, ignoreContainer = [], recursive = False):
    ignoreColor = False
    if color == -1:
        ignoreColor = True
        
    container = Items.FindBySerial(containerSerial)

    if isinstance( itemID, int ):
        foundItem = next( ( item for item in container.Contains if ( item.ItemID == itemID and ( ignoreColor or item.Hue == color ) ) ), None )
    elif isinstance( itemID, list ):
        foundItem = next( ( item for item in container.Contains if ( item.ItemID in itemID and ( ignoreColor or item.Hue == color ) ) ), None )
    else:
        raise ValueError( 'Unknown argument type for itemID passed to FindItem().', itemID, container )

    if foundItem != None:
        return foundItem        
    elif recursive == True:
        for item in container.Contains:
            if item.IsContainer:
                foundItem = find_in_container_by_id(itemID, containerSerial = item.Serial, color = color, ignoreContainer = ignoreContainer, recursive = recursive)
                if foundItem != None:
                    return foundItem

# get_pets (from core_mobiles.py)
def get_pets(range = 10, checkLineOfSight = True, mobileId = None):
    pets = []
    fil = Mobiles.Filter()
    fil.Enabled = True
    fil.RangeMax = range
    fil.Notorieties = List[Byte](bytes([1, 2]))
    fil.IsGhost = False
    fil.Friend = False
    fil.CheckLineOfSight = checkLineOfSight
    
    if mobileId is not None:
        fil.Bodies = List[Int32]([mobileId])
    
    blues = Mobiles.ApplyFilter(fil)    
    for blue in blues:
        if blue.CanRename:
            pets.append(blue)
    return pets

# get_tile_behind (from core_rails.py)
def get_tile_behind(distance = 1):
    direction = Player.Direction
    tileX = Player.Position.X
    tileY = Player.Position.Y
    
    if Player.Direction == 'Up':
        tileX = Player.Position.X + distance
        tileY = Player.Position.Y + distance
    elif Player.Direction == 'North':
        tileY = Player.Position.Y + distance
    elif Player.Direction == 'Right':
        tileX = Player.Position.X - distance
        tileY = Player.Position.Y + distance
    elif Player.Direction == 'East':
        tileX = Player.Position.X - distance
    elif Player.Direction == 'Down':
        tileX = Player.Position.X - distance
        tileY = Player.Position.Y - distance
    elif Player.Direction == 'South':
        tileY = Player.Position.Y - distance
    elif Player.Direction == 'Left':
        tileX = Player.Position.X + distance
        tileY = Player.Position.Y - distance
    elif Player.Direction == 'West':
        tileX = Player.Position.X + distance

    return tileX, tileY, Player.Position.Z

# get_tile_in_front (from core_rails.py)
def get_tile_in_front(distance = 1):
    direction = Player.Direction
    playerX = Player.Position.X
    playerY = Player.Position.Y
    playerZ = Player.Position.Z
    
    if direction == 'Up':
        tileX = playerX - distance
        tileY = playerY - distance
        tileZ = playerZ
    elif direction == 'North':
        tileX = playerX
        tileY = playerY - distance
        tileZ = playerZ
    elif direction == 'Right':
        tileX = playerX + distance
        tileY = playerY - distance
        tileZ = playerZ
    elif direction == 'East':
        tileX = playerX + distance
        tileY = playerY
        tileZ = playerZ
    elif direction == 'Down':
        tileX = playerX + distance
        tileY = playerY + distance
        tileZ = playerZ
    elif direction == 'South':
        tileX = playerX
        tileY = playerY + distance
        tileZ = playerZ
    elif direction == 'Left':
        tileX = playerX - distance
        tileY = playerY + distance
        tileZ = playerZ
    elif direction == 'West':
        tileX = playerX - distance
        tileY = playerY
        tileZ = playerZ
    return tileX, tileY, tileZ

# move (from core_rails.py)
def move(x):
    for _ in range(x):
        Player.Run(Player.Direction)
        Misc.Pause(200)

# should_move (from core_gathering.py)
def should_move():
    if Journal.Search('no metal') or Journal.Search('t mine that') or Journal.Search('no sand'):
        Journal.Clear()
        return True
    else:
        Journal.Clear()
        return False    

# drop_unwanted_resources (from core_gathering.py)
def drop_unwanted_resources(itemStaticIds, keepItemHues, itemMoveDelayMs):    
    for itemStaticId in itemStaticIds:
        resources = find_all_in_container_by_id(itemStaticId, containerSerial = Player.Backpack.Serial)
        for resource in resources:
            if resource.Color not in keepItemHues:
                print("Dropping {} on ground".format(resource.Name))
                tileX, tileY, tileZ = get_tile_behind(2)
                Items.MoveOnGround(resource, resource.Amount, tileX, tileY, tileZ)
                Misc.Pause(itemMoveDelayMs)

# getMinerTool (from core_gathering.py)
def getMinerTool():
    for minerToolStaticID in MINER_TOOLS_STATIC_IDS:
        miningTool = find_in_container_by_id(minerToolStaticID, Player.Backpack.Serial)
        if miningTool is not None:
            return miningTool    

# get_tile_in_front_serial (from core_gathering.py)
def get_tile_in_front_serial():
    tileX, tileY, tileZ = get_tile_in_front()
    #tileinfo = Statics.GetStaticsLandInfo(tileX, tileY, Player.Map)

    filter = Items.Filter()
    # 0x053B is Cave floor
    # 0x0018 is Sand
    filter.Graphics = List[Int32]((0x053B)) 
    filter.OnGround = True
    filter.RangeMax = 1
    items = Items.ApplyFilter(filter)
    for item in items:
        if item.Position.X == tileX and item.Position.Y == tileY:
            return item.Serial, tileX, tileY, tileZ 
    return None, tileX, tileY, tileZ 

# move_items_to_pack_animal (from core_gathering.py)
def move_items_to_pack_animal(itemIds, packAnimalMobileId, itemMoveDelayMs):
    for itemId in itemIds:
        for item in Items.FindAllByID(itemId, -1, Player.Backpack.Serial, 0):
            packAnimals = get_pets(range = 2, checkLineOfSight = True, mobileId = packAnimalMobileId)
            
            if len(packAnimals) == 0:
                return
        
            for packAnimal in packAnimals:
                if packAnimal.Backpack.Weight < 1350:
                    print("Moving {} to {} (Weight: {})".format(item.Name, packAnimal.Name, packAnimal.Backpack.Weight))
                    Items.Move(item, packAnimal.Backpack.Serial, item.Amount)
                    Misc.Pause(itemMoveDelayMs)

# smelt_ore (from core_gathering.py)
def smelt_ore(forgeAnimalMobileId, itemMoveDelayMs):
    forgeAnimals = get_pets(range = 2, checkLineOfSight = True, mobileId = forgeAnimalMobileId)
    if len(forgeAnimals) > 0:
        for oreId in ORE_STATIC_IDS:
            ores = find_all_in_container_by_id(oreId, Player.Backpack.Serial)
            for ore in ores:
                Journal.Clear()
                Items.UseItem(ore)
                Target.WaitForTarget(5000, True)
                Target.TargetExecute(forgeAnimals[0])
                Misc.Pause(itemMoveDelayMs)
                if Journal.Search("There is not enough metal-bearing ore in this pile to make an ingot."):
                    print(ore)
                    print(ore.Serial)
                    #tileX, tileY, tileZ = get_tile_in_front()
                    tileX, tileY, tileZ = get_tile_behind(2)
                    Items.MoveOnGround(ore, 0, tileX, tileY , 0)
                    Misc.Pause(itemMoveDelayMs)
        Misc.Pause(itemMoveDelayMs)     
    else:
        print("No forge animal found")

# run_mining_loop (from core_gathering.py)
def run_mining_loop(

    # (Optional) After a vein runs out, how many tiles forward to move.
    numTilesToMove = 1,
    
    # (Optional) Only keep ingots that match these hues. By default that is all hues. Remove the ones
    # you wish to discard. It will drop them at your feet. It is a common case where you may not care
    # about the basic iron ingots (RESOURCE_HUE_DEFAULT), so remove that from the list if you only
    # want special ingots.
    keepItemHues = [RESOURCE_HUE_DULL_COPPER, RESOURCE_HUE_SHADOW_IRON, RESOURCE_HUE_COPPER, RESOURCE_HUE_BRONZE, RESOURCE_HUE_GOLD, RESOURCE_HUE_AGAPITE, RESOURCE_HUE_VERITE, RESOURCE_HUE_VALORITE],

    # (Optional) The mobile ID of your pack animal. NOT the Serial. Defaults to blue beetle.
    packAnimalMobileId = BLUE_BEETLE_MOBILE_ID,       
    
    # (Optional) The mobile ID of your forge animal. NOT the serial. Defaults to fire beetle.
    forgeAnimalMobileId = FIRE_BEETLE_MOBILE_ID,
    
    # (Optional) Number of miliseconds between item moves typically from one pack to another.
    itemMoveDelayMs = 1000
):
                
    while True:
        drop_unwanted_resources(INGOT_STATIC_IDS + STONE_STATIC_IDS + ORE_STATIC_IDS, keepItemHues, itemMoveDelayMs) 
        smelt_ore(forgeAnimalMobileId, itemMoveDelayMs)
        move_items_to_pack_animal(INGOT_STATIC_IDS + STONE_STATIC_IDS + SAND_STATIC_IDS, packAnimalMobileId, itemMoveDelayMs)
        miningTool = getMinerTool()
        
        Journal.Clear()
        Items.UseItem(miningTool)
        Target.WaitForTarget(5000, True)
        
        tileSerial, tileX, tileY, tileZ  = get_tile_in_front_serial()
        if tileSerial is not None:
            Target.TargetExecute(tileSerial)
        else:
            Target.TargetExecute(tileX, tileY, tileZ)
        
        Misc.Pause(itemMoveDelayMs)
        
        if should_move():
            move(numTilesToMove)

        Misc.Pause(int(itemMoveDelayMs / 2))

# ===============================================
# Main Script Code
# ===============================================
# Razor Enhanced Scripts for Ultima Online by
#   GRL  
#   https://github.com/GloriousRedLeader/omgarturo
#   2025-02-12
# Use at your own risk. 

from Scripts.omgarturo.fm_core.core_gathering import run_mining_loop
from Scripts.omgarturo.fm_core.core_mobiles import FIRE_BEETLE_MOBILE_ID
from Scripts.omgarturo.fm_core.core_mobiles import BLUE_BEETLE_MOBILE_ID
from Scripts.omgarturo.fm_core.core_items import RESOURCE_HUE_DEFAULT
from Scripts.omgarturo.fm_core.core_items import RESOURCE_HUE_DULL_COPPER
from Scripts.omgarturo.fm_core.core_items import RESOURCE_HUE_SHADOW_IRON
from Scripts.omgarturo.fm_core.core_items import RESOURCE_HUE_COPPER
from Scripts.omgarturo.fm_core.core_items import RESOURCE_HUE_BRONZE
from Scripts.omgarturo.fm_core.core_items import RESOURCE_HUE_GOLD
from Scripts.omgarturo.fm_core.core_items import RESOURCE_HUE_AGAPITE
from Scripts.omgarturo.fm_core.core_items import RESOURCE_HUE_VERITE
from Scripts.omgarturo.fm_core.core_items import RESOURCE_HUE_VALORITE

# Mines in a straight line. Perfect for cave floors. Your character will mine
# a vein until it runs out and then step forward numTilesToMove tiles.
# You can provide a mobile ID for a pack animal and a forge animal
# so you can smelt and store smelted ore in your pack animal. Note: This is the
# mobile ID (NOT the Serial of your pack / forge animals). I have constants for these
# for commone ones like fire beetle and blue beetle.
run_mining_loop(

    # (Optional) After a vein runs out, how many tiles forward to move.
    numTilesToMove = 1,
    
    # (Optional) Only keep ingots that match these hues. By default that is all hues. Remove the ones
    # you wish to discard. It will drop them at your feet. It is a common case where you may not care
    # about the basic iron ingots (RESOURCE_HUE_DEFAULT), so remove that from the list if you only
    # want special ingots.
    keepItemHues = [RESOURCE_HUE_DULL_COPPER, RESOURCE_HUE_SHADOW_IRON, RESOURCE_HUE_COPPER, RESOURCE_HUE_BRONZE, RESOURCE_HUE_GOLD, RESOURCE_HUE_AGAPITE, RESOURCE_HUE_VERITE, RESOURCE_HUE_VALORITE],

    # (Optional) The mobile ID of your pack animal. NOT the Serial. Defaults to blue beetle.
    packAnimalMobileId = BLUE_BEETLE_MOBILE_ID,       
    
    # (Optional) The mobile ID of your forge animal. NOT the serial. Defaults to fire beetle.
    forgeAnimalMobileId = FIRE_BEETLE_MOBILE_ID,
    
    # (Optional) Number of miliseconds between item moves typically from one pack to another.
    itemMoveDelayMs = 1000
)
