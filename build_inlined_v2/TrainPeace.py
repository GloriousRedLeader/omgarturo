# Razor Enhanced Scripts for Ultima Online by
#   GRL  
#   https://github.com/GloriousRedLeader/omgarturo
#   2025-09-17
# Use at your own risk. 
#
# This file was auto-generated by the import inliner.
# Original dependencies from fm_core have been inlined below.

# ===============================================
# External Imports
# ===============================================
from System.Collections.Generic import List

# ===============================================
# Inlined Dependencies (topologically sorted)
# ===============================================

# LAP_HARP_GRAPHIC_ID (from core_items.py)
LAP_HARP_GRAPHIC_ID = 0x0EB2

# find_in_container_by_id (from core_player.py)
def find_in_container_by_id(itemID, containerSerial = Player.Backpack.Serial, color = -1, ignoreContainer = [], recursive = False):
    ignoreColor = False
    if color == -1:
        ignoreColor = True
        
    container = Items.FindBySerial(containerSerial)

    if isinstance( itemID, int ):
        foundItem = next( ( item for item in container.Contains if ( item.ItemID == itemID and ( ignoreColor or item.Hue == color ) ) ), None )
    elif isinstance( itemID, list ):
        foundItem = next( ( item for item in container.Contains if ( item.ItemID in itemID and ( ignoreColor or item.Hue == color ) ) ), None )
    else:
        raise ValueError( 'Unknown argument type for itemID passed to FindItem().', itemID, container )

    if foundItem != None:
        return foundItem        
    elif recursive == True:
        for item in container.Contains:
            if item.IsContainer:
                foundItem = find_in_container_by_id(itemID, containerSerial = item.Serial, color = color, ignoreContainer = ignoreContainer, recursive = recursive)
                if foundItem != None:
                    return foundItem

# INSTRUMENT_STATIC_IDS (from core_items.py)
INSTRUMENT_STATIC_IDS = [ 
    0x0E9C, # drum
    0x2805, # flute
    0x0EB3, # lute
    LAP_HARP_GRAPHIC_ID, # lap harp
    0x0EB1, # standing harp
    0x0E9E, # tambourine
    0x0E9D, # tambourine (tassle)
]

# find_first_in_container_by_ids (from core_player.py)
def find_first_in_container_by_ids(itemIDs, containerSerial = Player.Backpack.Serial):
    for itemID in itemIDs:
        item = find_in_container_by_id(itemID, containerSerial)
        if item != None:
            return item
    return None

# ===============================================
# Main Script Code
# ===============================================
# Razor Enhanced Scripts for Ultima Online by
#   GRL  
#   https://github.com/GloriousRedLeader/omgarturo
#   2024-03-26
# Use at your own risk. 

from Scripts.omgarturo.fm_core.core_items import INSTRUMENT_STATIC_IDS
from Scripts.omgarturo.fm_core.core_player import find_first_in_container_by_ids
from System.Collections.Generic import List

# I DID NOT WRITE THIS SCRIPT! I did make it worse though.
# Credit goes to wherever this came from. 
# Im hosting for safekeeping.
# Also, it may or may not work. I forget. Good luck.


'''
Author: TheWarDoctor95
Other Contributors:
Last Contribution By: TheWarDoctor95 - March 23, 2019

Description: Uses the Peacemaking skill on the player to train Peacemaking to GM
'''

Player.HeadMessage(38, "Training Peacemaking")

peacemakingTimerMilliseconds = 10200
journalEntryDelayMilliseconds = 200
targetClearDelayMilliseconds = 200

def TrainPeacemaking():
    '''
    Trains Peacemaking to GM
    '''
    # Script variables
    global peacemakingTimerMilliseconds
    peacemakingHandled = False

    if Player.GetRealSkillValue( 'Peacemaking' ) == Player.GetSkillCap( 'Peacemaking' ):
        Misc.SendMessage( 'You\'ve already maxed out Peacemaking!', 65 )
        return

    # Initialize skill timers
    Timer.Create( 'peacemakingTimer', 1 )

    # Initialize the journal and ignore object list
    Journal.Clear()
    Misc.ClearIgnore()

    while not Player.IsGhost and Player.GetRealSkillValue( 'Peacemaking' ) < Player.GetSkillCap( 'Peacemaking' ):
        if not Timer.Check( 'peacemakingTimer' ):
            # Clear any previously selected target and the target queue
            Target.ClearLastandQueue()

            # Wait for the target to finish clearing
            Misc.Pause(targetClearDelayMilliseconds )

            #Player.UseSkill( 'Peacemaking' )

            # Wait for the journal entry to come up
            #Misc.Pause( journalEntryDelayMilliseconds )

            # Handle the Journal response
            #if Journal.SearchByType( 'What instrument shall you play?', 'Regular' ):
            instrument = find_first_in_container_by_ids(INSTRUMENT_STATIC_IDS, Player.Backpack)
                ##instrument = FindInstrument( Player.Backpack )
            if instrument == None:
                Misc.Message( 'No instrument to peacemake with.', 1100 )
                return
             #Target.WaitForTarget( 2000, True )
            
            Items.UseItem(instrument)
            Misc.Pause(1000)
             
            Player.UseSkill( 'Peacemaking' )
             
            #Target.TargetExecute( instrument )

            Target.WaitForTarget( 2000, True )
            Target.TargetExecute( Player.Serial )

            # Wait for the journal entry to come up
            Misc.Pause( journalEntryDelayMilliseconds )

            if ( Journal.SearchByType( 'You play hypnotic music, calming your target.', 'Regular' ) or
                    Journal.SearchByType( 'You play your hypnotic music, stopping the battle.', 'Regular' ) or
                    Journal.SearchByType( 'You attempt to calm everyone, but fail.', 'Regular' ) or
                    Journal.SearchByType( 'You play hypnotic music, but there is nothing in range for you to calm.', 'Regular' ) or
                    Journal.SearchByType( 'You attempt to calm your target, but fail.', 'Regular' ) ):
                # Skill was used successfully, even if the enemy was not successfully put to peace
                Timer.Create( 'peacemakingTimer', peacemakingTimerMilliseconds )
            elif Journal.SearchByType( 'You have no chance of calming that creature', 'Regular' ):
                # We werent able to use the skill, indicate as such by not waiting for the typical cooldown
                Timer.Create( 'peacemakingTimer', 1 )
            else:
                # We werent able to use the skill, indicate as such by not waiting for the typical cooldown
                Timer.Create( 'peacemakingTimer', 1 )

            Journal.Clear()

        # Wait a little bit so that the while loop doesn't consume as much CPU
        Misc.Pause( 50 )

# Start Peacemaking training
TrainPeacemaking()
