# Razor Enhanced Scripts for Ultima Online by
#   GRL  
#   https://github.com/GloriousRedLeader/omgarturo
#   2025-09-19
# Use at your own risk. 
#
# This file was auto-generated by the import inliner.
# Original dependencies from fm_core have been inlined below.

# ===============================================
# External Imports
# ===============================================
from System import Byte, Int32
from System.Collections.Generic import List
import re
import time

# ##########################################################
# #                                                        #
# #              INLINED DEPENDENCIES                     #
# #                                                        #
# #  DO NOT EDIT THIS SECTION - AUTO-GENERATED CODE       #
# #                                                        #
# #  These are dependencies from fm_core that have been   #
# #  automatically inlined. For user-editable code,       #
# #  scroll down to the bottom of this file.              #
# #                                                        #
# ##########################################################

# PET_LEASH_STATIC_IDS (from core_items.py)
PET_LEASH_STATIC_IDS = [0x1374]

# find_in_container_by_id (from core_player.py)
def find_in_container_by_id(itemID, containerSerial = Player.Backpack.Serial, color = -1, ignoreContainer = [], recursive = False):
    ignoreColor = False
    if color == -1:
        ignoreColor = True
        
    container = Items.FindBySerial(containerSerial)

    if isinstance( itemID, int ):
        foundItem = next( ( item for item in container.Contains if ( item.ItemID == itemID and ( ignoreColor or item.Hue == color ) ) ), None )
    elif isinstance( itemID, list ):
        foundItem = next( ( item for item in container.Contains if ( item.ItemID in itemID and ( ignoreColor or item.Hue == color ) ) ), None )
    else:
        raise ValueError( 'Unknown argument type for itemID passed to FindItem().', itemID, container )

    if foundItem != None:
        return foundItem        
    elif recursive == True:
        for item in container.Contains:
            if item.IsContainer:
                foundItem = find_in_container_by_id(itemID, containerSerial = item.Serial, color = color, ignoreContainer = ignoreContainer, recursive = recursive)
                if foundItem != None:
                    return foundItem

# get_pets (from core_mobiles.py)
def get_pets(range = 10, checkLineOfSight = True, mobileId = None):
    pets = []
    fil = Mobiles.Filter()
    fil.Enabled = True
    fil.RangeMax = range
    fil.Notorieties = List[Byte](bytes([1, 2]))
    fil.IsGhost = False
    fil.Friend = False
    fil.CheckLineOfSight = checkLineOfSight
    
    if mobileId is not None:
        fil.Bodies = List[Int32]([mobileId])
    
    blues = Mobiles.ApplyFilter(fil)    
    for blue in blues:
        if blue.CanRename:
            pets.append(blue)
    return pets

# find_first_in_container_by_ids (from core_player.py)
def find_first_in_container_by_ids(itemIDs, containerSerial = Player.Backpack.Serial):
    for itemID in itemIDs:
        item = find_in_container_by_id(itemID, containerSerial)
        if item != None:
            return item
    return None

# leash_pets (from core_pets.py)
def leash_pets ():
    leash = find_first_in_container_by_ids(PET_LEASH_STATIC_IDS)
    if leash == None:
        Player.HeadMessage(38, "You do not have a leash in backpack.")
        return False
    
    for pet in get_pets():
        if Player.DistanceTo(pet) <= 5:
            Items.UseItem(leash)
            Target.WaitForTarget(3000)
            Player.HeadMessage( 88, "Leashing fluffy {}".format(pet.Name))
            Target.TargetExecute(pet)
            Misc.Pause(1000)

# ##########################################################
# #                                                        #
# #                 USER EDITABLE CODE                    #
# #                                                        #
# #  This is the original script code that you can        #
# #  modify and customize. Edit the parameters, logic,    #
# #  and function calls below as needed for your setup.   #
# #                                                        #
# #  The dependencies above have been automatically       #
# #  inlined and should not be modified.                  #
# ##########################################################

# ===============================================
# Main Script Code
# ===============================================
# Organizes scrolls for mibs into containers based on x, y coordinates.
# Set one container for east and another for west. 

#SOURCE_CONTAINER_ID = 0x40DB059B # Blue bag
#SOURCE_CONTAINER_ID = 0x408A916E # Brown bag

SOURCE_CONTAINER_ID = Target.PromptTarget("Pick source container", 38)

WEST_CONTAINER_ID = 0x4010BA53
CENTRAL_CONTAINER_ID = 0x401F082C
EAST_CONTAINER_ID = 0x40801537
SCROLL_ITEM_ID = 0x14EE
MIB_ITEM_ID = 0x099F

mibs = Items.FindAllByID(MIB_ITEM_ID, -1, SOURCE_CONTAINER_ID, 1)
for mib in mibs:
    Items.UseItem(mib)
    Misc.Pause(250)

scrolls = Items.FindAllByID(SCROLL_ITEM_ID, -1, SOURCE_CONTAINER_ID, 1)
for scroll in scrolls:
    for prop in scroll.Properties:
        match = re.match(r"(.*){1}\:\s\((\d+){1}, (\d+){1}\)", prop.ToString())
        if match is not None:
            facet = match.group(1)
            x = int(match.group(2))
            y = int(match.group(3))
            if facet == "Felucca":
                # West
                if x < 1500:
                    print(facet, x, y, "Moving to west")
                    Items.Move(scroll, WEST_CONTAINER_ID, scroll.Amount)
                # Central
                elif x < 3500:
                    print(facet, x, y, "Moving to central")
                    Items.Move(scroll, CENTRAL_CONTAINER_ID, scroll.Amount)
                # East
                else: 
                    print(facet, x, y, "Moving to east")
                    Items.Move(scroll, EAST_CONTAINER_ID, scroll.Amount)
                Misc.Pause(650)            
