# Razor Enhanced Scripts for Ultima Online by
#   GRL  
#   https://github.com/GloriousRedLeader/omgarturo
#   2025-09-18
# Use at your own risk. 
#
# This file was auto-generated by the import inliner.
# Original dependencies from fm_core have been inlined below.

# ===============================================
# External Imports
# ===============================================
from pathlib import Path
import __main__
import inspect
import os
import re

# ===============================================
# Inlined Dependencies (topologically sorted)
# ===============================================

# ANIMATE_DEAD_DELAY (from core_spells.py)
ANIMATE_DEAD_DELAY = 1750

# ARCANE_EMPOWERMENT_DELAY (from core_spells.py)
ARCANE_EMPOWERMENT_DELAY = 3000

# ARCH_CURE_DELAY (from core_spells.py)
ARCH_CURE_DELAY = 1750

# ATTUNE_WEAPON_DELAY (from core_spells.py)
ATTUNE_WEAPON_DELAY = 1000

# BARD_SONG_DELAY (from core_spells.py)
BARD_SONG_DELAY = 2000

# BLOOD_OATH_DELAY (from core_spells.py)
BLOOD_OATH_DELAY = 1750

# CHAIN_LIGHTNING_DELAY (from core_spells.py)
CHAIN_LIGHTNING_DELAY = 2000

# CLOSE_WOUNDS_DELAY (from core_spells.py)
CLOSE_WOUNDS_DELAY = 1500

# CONDUIT_DELAY (from core_spells.py)
CONDUIT_DELAY = 2250

# CONSECRATE_WEAPON_DELAY (from core_spells.py)
CONSECRATE_WEAPON_DELAY = 500

# CORPSE_SKIN_DELAY (from core_spells.py)
CORPSE_SKIN_DELAY = 1750

# CURSE_DELAY (from core_spells.py)
CURSE_DELAY = 1750

# CURSE_WEAPON_DELAY (from core_spells.py)
CURSE_WEAPON_DELAY = 1000

# DEATH_RAY_DELAY (from core_spells.py)
DEATH_RAY_DELAY = 2250

# DIVINE_FURY_DELAY (from core_spells.py)
DIVINE_FURY_DELAY = 1000

# ENEMY_OF_ONE_DELAY (from core_spells.py)
ENEMY_OF_ONE_DELAY = 500

# ENERGY_BOLT_DELAY (from core_spells.py)
ENERGY_BOLT_DELAY = 2000

# EVIL_OMEN_DELAY (from core_spells.py)
EVIL_OMEN_DELAY = 1000

# FC_CAP_BARD_SONG (from core_spells.py)
FC_CAP_BARD_SONG = 4

# FC_CAP_CHIVALRY (from core_spells.py)
FC_CAP_CHIVALRY = 4

# FC_CAP_MAGERY (from core_spells.py)
FC_CAP_MAGERY = 2

# FC_CAP_NECROMANCY (from core_spells.py)
FC_CAP_NECROMANCY = 3 if (Player.GetSkillValue("Necromancy") == 120 and Player.GetSkillValue("Necromancy") == 120 and not any(Player.GetSkillValue(skill) > 30 for skill in ["Magery", "Spellweaving", "Parrying", "Mysticism", "Chivalry", "Animal Taming", "Animal Lore", "Ninjitsu", "Bushido", "Focus", "Imbuing", "Evaluating Intelligence"])) else 2

# FC_CAP_SHIELD_BASH (from core_spells.py)
FC_CAP_SHIELD_BASH = 4

# FC_CAP_SPELLWEAVING (from core_spells.py)
FC_CAP_SPELLWEAVING = 4

# FIRE_FIELD_DELAY (from core_spells.py)
FIRE_FIELD_DELAY = 1750

# FLAME_STRIKE_DELAY (from core_spells.py)
FLAME_STRIKE_DELAY = 2500

# GIFT_OF_LIFE_DELAY (from core_spells.py)
GIFT_OF_LIFE_DELAY = 4000

# GIFT_OF_RENEWAL_DELAY (from core_spells.py)
GIFT_OF_RENEWAL_DELAY = 3000

# GREATER_HEAL_DELAY (from core_spells.py)
GREATER_HEAL_DELAY = 1750

# LAP_HARP_GRAPHIC_ID (from core_items.py)
LAP_HARP_GRAPHIC_ID = 0x0EB2

# PAIN_SPIKE_DELAY (from core_spells.py)
PAIN_SPIKE_DELAY = 1250

# POISON_DELAY (from core_spells.py)
POISON_DELAY = 1500

# POISON_FIELD_DELAY (from core_spells.py)
POISON_FIELD_DELAY = 2000

# POISON_STRIKE_DELAY (from core_spells.py)
POISON_STRIKE_DELAY = 2000

# PROTECTION_DELAY (from core_spells.py)
PROTECTION_DELAY = 750

# REMOVE_CURSE_DELAY (from core_spells.py)
REMOVE_CURSE_DELAY = 1500

# RUNEBOOK (from core_items.py)
RUNEBOOK = 0x22C5

# SHIELD_BASH_DELAY (from core_spells.py)
SHIELD_BASH_DELAY = 1000

# STRANGLE_DELAY (from core_spells.py)
STRANGLE_DELAY = 2250 + 500

# THUNDERSTORM_DELAY (from core_spells.py)
THUNDERSTORM_DELAY = 1500

# VAMPIRIC_EMBRACE_DELAY (from core_spells.py)
VAMPIRIC_EMBRACE_DELAY = 2250

# WILDFIRE_DELAY (from core_spells.py)
WILDFIRE_DELAY = 2500

# WITHER_DELAY (from core_spells.py)
WITHER_DELAY = 2250

# WORD_OF_DEATH_DELAY (from core_spells.py)
WORD_OF_DEATH_DELAY = 3500

# WRAITH_FORM_DELAY (from core_spells.py)
WRAITH_FORM_DELAY = 2250

# find_in_container_by_id (from core_player.py)
def find_in_container_by_id(itemID, containerSerial = Player.Backpack.Serial, color = -1, ignoreContainer = [], recursive = False):
    ignoreColor = False
    if color == -1:
        ignoreColor = True
        
    container = Items.FindBySerial(containerSerial)

    if isinstance( itemID, int ):
        foundItem = next( ( item for item in container.Contains if ( item.ItemID == itemID and ( ignoreColor or item.Hue == color ) ) ), None )
    elif isinstance( itemID, list ):
        foundItem = next( ( item for item in container.Contains if ( item.ItemID in itemID and ( ignoreColor or item.Hue == color ) ) ), None )
    else:
        raise ValueError( 'Unknown argument type for itemID passed to FindItem().', itemID, container )

    if foundItem != None:
        return foundItem        
    elif recursive == True:
        for item in container.Contains:
            if item.IsContainer:
                foundItem = find_in_container_by_id(itemID, containerSerial = item.Serial, color = color, ignoreContainer = ignoreContainer, recursive = recursive)
                if foundItem != None:
                    return foundItem

# get_fc_delay (from core_spells.py)
def get_fc_delay (

    # Constants defined above for each spell
    baseDelayMs,
    
    # Each spell can have a different FC cap. Use constants above.
    fcCap,
    
    # Milliseonds of extra delay when computing cast time to account for internet fuzz. Fine tune this as needed.
    latencyMs = 200
):

    latency = 100
    fcOffset = 250 * (min(max(Player.FasterCasting - 2, 0), fcCap - 2) if Player.BuffsExist("Protection") else min(Player.FasterCasting, fcCap))
    delay = baseDelayMs - fcOffset
    if delay < 250:
        delay = 250
        
    #delay = delay + latencyMs
    #print("fc", Player.FasterCasting, "fcCap", fcCap, "protection", Player.BuffsExist("Protection"), "baseDelayMs", baseDelayMs, "fcOffset", fcOffset, "delay", delay)        
    return delay + latencyMs

# get_fcr_delay (from core_spells.py)
def get_fcr_delay(

    # Spell from Magery, Spellweaving, Necromancy, Chivalry
    spellName,  
    
    # Milliseonds of extra delay when computing cast time to account for internet fuzz. Fine tune this as needed.
    latencyMs = 200
):

    fcr = int(((6 - Player.FasterCastRecovery) / 4) * 1000)
        
    if fcr < 1:
        fcr = 1

    #print("FCR", "fcr", fcr)        
    return fcr + latencyMs

# INSTRUMENT_STATIC_IDS (from core_items.py)
INSTRUMENT_STATIC_IDS = [ 
    0x0E9C, # drum
    0x2805, # flute
    0x0EB3, # lute
    LAP_HARP_GRAPHIC_ID, # lap harp
    0x0EB1, # standing harp
    0x0E9E, # tambourine
    0x0E9D, # tambourine (tassle)
]

# find_first_in_container_by_ids (from core_player.py)
def find_first_in_container_by_ids(itemIDs, containerSerial = Player.Backpack.Serial):
    for itemID in itemIDs:
        item = find_in_container_by_id(itemID, containerSerial)
        if item != None:
            return item
    return None

# cast_spell (from core_spells.py)
def cast_spell(
    # Spell from Magery, Spellweaving, Necromancy, Chivalry
    spellName, 
    
    # Optional mobile target, otherwise spell specific logic.
    # This can be a serial, a mobile, or a Point3D (Position)
    target = None,
    
    # Milliseonds of extra delay when computing cast time to account for internet fuzz. Fine tune this as needed.
    latencyMs = 200
):
    Target.Cancel()
    
    if spellName == "Wildfire":
        Spells.CastSpellweaving(spellName)
        Target.WaitForTarget(get_fc_delay(WILDFIRE_DELAY, FC_CAP_SPELLWEAVING, latencyMs))
    elif spellName == "Attune Weapon":
        Spells.CastSpellweaving(spellName)
        Target.WaitForTarget(get_fc_delay(ATTUNE_WEAPON_DELAY, FC_CAP_SPELLWEAVING, latencyMs))
    elif spellName == "Thunderstorm":
        Spells.CastSpellweaving(spellName)
        Misc.Pause(get_fc_delay(THUNDERSTORM_DELAY, FC_CAP_SPELLWEAVING, latencyMs)) 
    elif spellName == "Word of Death":
        Spells.CastSpellweaving(spellName)
        Target.WaitForTarget(get_fc_delay(WORD_OF_DEATH_DELAY, FC_CAP_SPELLWEAVING, latencyMs))
    elif spellName == "Arcane Empowerment":
        Spells.CastSpellweaving(spellName)    
        Target.WaitForTarget(get_fc_delay(ARCANE_EMPOWERMENT_DELAY, FC_CAP_SPELLWEAVING, latencyMs))
        
    elif spellName == "Gift of Life":
        Spells.CastSpellweaving(spellName)    
        Target.WaitForTarget(get_fc_delay(GIFT_OF_LIFE_DELAY, FC_CAP_SPELLWEAVING, latencyMs))
    elif spellName == "Gift of Renewal":
        Spells.CastSpellweaving(spellName)    
        Target.WaitForTarget(get_fc_delay(GIFT_OF_RENEWAL_DELAY, FC_CAP_SPELLWEAVING, latencyMs))

    elif spellName == "Wither":
        Spells.CastNecro(spellName)
        Misc.Pause(get_fc_delay(WITHER_DELAY, FC_CAP_NECROMANCY, latencyMs)) 
    elif spellName == "Conduit":
        Spells.CastMastery(spellName)
        Target.WaitForTarget(get_fc_delay(CONDUIT_DELAY, FC_CAP_NECROMANCY, latencyMs))
    elif spellName == "Corpse Skin":
        Spells.CastNecro(spellName)
        Target.WaitForTarget(get_fc_delay(CORPSE_SKIN_DELAY, FC_CAP_NECROMANCY, latencyMs))
    elif spellName == "Pain Spike":
        Spells.CastNecro(spellName)
        Target.WaitForTarget(get_fc_delay(PAIN_SPIKE_DELAY, FC_CAP_NECROMANCY, latencyMs))        
    elif spellName == "Evil Omen":
        Spells.CastNecro(spellName)
        Target.WaitForTarget(get_fc_delay(EVIL_OMEN_DELAY, FC_CAP_NECROMANCY, latencyMs))
    elif spellName == "Blood Oath":
        Spells.CastNecro(spellName)
        Target.WaitForTarget(get_fc_delay(BLOOD_OATH_DELAY, FC_CAP_NECROMANCY, latencyMs))
    elif spellName == "Strangle":
        Spells.CastNecro(spellName)
        Target.WaitForTarget(get_fc_delay(STRANGLE_DELAY, FC_CAP_NECROMANCY, latencyMs))
    elif spellName == "Poison Strike":
        Spells.CastNecro(spellName)
        Target.WaitForTarget(get_fc_delay(POISON_STRIKE_DELAY, FC_CAP_NECROMANCY, latencyMs))
    elif spellName == "Curse Weapon":
        Spells.CastNecro(spellName)
        Misc.Pause(get_fc_delay(CURSE_WEAPON_DELAY, FC_CAP_NECROMANCY, latencyMs))        
    elif spellName == "Animate Dead":
        Spells.CastNecro(spellName)
        Misc.Pause(get_fc_delay(ANIMATE_DEAD_DELAY, FC_CAP_NECROMANCY, latencyMs))        
    elif spellName == "Wraith Form":
        Spells.CastNecro(spellName)
        Misc.Pause(get_fc_delay(WRAITH_FORM_DELAY, FC_CAP_NECROMANCY, latencyMs))  
    elif spellName == "Vampiric Embrace":
        Spells.CastNecro(spellName)
        Misc.Pause(get_fc_delay(VAMPIRIC_EMBRACE_DELAY, FC_CAP_NECROMANCY, latencyMs))       
    elif spellName == "Poison Field":
        Spells.CastMagery(spellName)
        Target.WaitForTarget(get_fc_delay(POISON_FIELD_DELAY, FC_CAP_MAGERY, latencyMs))
    elif spellName == "Fire Field":
        Spells.CastMagery(spellName)
        Target.WaitForTarget(get_fc_delay(FIRE_FIELD_DELAY, FC_CAP_MAGERY, latencyMs))
    elif spellName == "Poison":
        Spells.CastMagery(spellName)
        Target.WaitForTarget(get_fc_delay(POISON_DELAY, FC_CAP_MAGERY, latencyMs))
        
    elif spellName == "Protection":
        Spells.CastMagery(spellName)
        Misc.Pause(get_fc_delay(PROTECTION_DELAY, FC_CAP_MAGERY, latencyMs))
        
    elif spellName == "Energy Bolt":
        Spells.CastMagery(spellName)
        Target.WaitForTarget(get_fc_delay(ENERGY_BOLT_DELAY, FC_CAP_MAGERY, latencyMs))
    elif spellName == "Flame Strike":
        Spells.CastMagery(spellName)
        Target.WaitForTarget(get_fc_delay(FLAME_STRIKE_DELAY, FC_CAP_MAGERY, latencyMs))
    elif spellName == "Chain Lightning":
        Spells.CastMagery(spellName)
        Target.WaitForTarget(get_fc_delay(CHAIN_LIGHTNING_DELAY, FC_CAP_MAGERY, latencyMs))

    elif spellName == "Death Ray":
        Spells.CastMastery(spellName)
        Target.WaitForTarget(get_fc_delay(DEATH_RAY_DELAY, FC_CAP_MAGERY, latencyMs))
    elif spellName == "Curse":
        Spells.CastMagery(spellName)
        Target.WaitForTarget(get_fc_delay(CURSE_DELAY, FC_CAP_MAGERY, latencyMs))
        Target.TargetExecute(target)
    elif spellName == "Arch Cure":
        Spells.CastMagery(spellName)
        Target.WaitForTarget(get_fc_delay(ARCH_CURE_DELAY, FC_CAP_MAGERY, latencyMs))
    elif spellName == "Greater Heal":
        Spells.CastMagery(spellName)
        Target.WaitForTarget(get_fc_delay(GREATER_HEAL_DELAY, FC_CAP_MAGERY, latencyMs))
    elif spellName == "Remove Curse":
        Spells.CastChivalry(spellName)
        Target.WaitForTarget(get_fc_delay(REMOVE_CURSE_DELAY, FC_CAP_CHIVALRY, latencyMs))
    elif spellName == "Close Wounds":
        Spells.CastChivalry(spellName)
        Target.WaitForTarget(get_fc_delay(CLOSE_WOUNDS_DELAY, FC_CAP_CHIVALRY, latencyMs))        
    elif spellName == "Divine Fury":
        Spells.CastChivalry(spellName)
        Misc.Pause(get_fc_delay(DIVINE_FURY_DELAY, FC_CAP_CHIVALRY, latencyMs))            
    elif spellName == "Consecrate Weapon":
        Spells.CastChivalry(spellName)
        Misc.Pause(get_fc_delay(CONSECRATE_WEAPON_DELAY, FC_CAP_CHIVALRY, latencyMs))            
    elif spellName == "Enemy of One":
        Spells.CastChivalry(spellName)
        Misc.Pause(get_fc_delay(ENEMY_OF_ONE_DELAY, FC_CAP_CHIVALRY, latencyMs))            
    #elif spellName == "Meditation":
    #    Player.UseSkill(spellName)
    elif spellName == "Shield Bash":
        Spells.CastMastery(spellName)
        Misc.Pause(get_fc_delay(SHIELD_BASH_DELAY, FC_CAP_SHIELD_BASH, latencyMs))            
    elif spellName == "Inspire" or spellName == "Invigorate" or spellName == "Resilience" or spellName == "Perseverance":
        Journal.Clear()
        Spells.CastMastery(spellName)
        Misc.Pause(get_fc_delay(BARD_SONG_DELAY, FC_CAP_BARD_SONG, latencyMs))  
        if Journal.Search( 'What instrument shall you play?' ):
            instrument = find_first_in_container_by_ids(INSTRUMENT_STATIC_IDS)
            if instrument is not None:
                Target.TargetExecute(instrument)
                Target.WaitForTarget(latencyMs)
            else:
                Misc.SendMessage("No instruments found to play bard songs!")        
    else:
        Player.HeadMessage(28, "That spell is not supported! Pausing.")
        Misc.Pause(1000)

    if target is not None:
        if type(target).__name__ == "Point3D":
            Target.TargetExecute(target.X, target.Y, target.Z)
        else:
            Target.TargetExecute(target)
    
    Misc.Pause(get_fcr_delay(spellName, latencyMs))

# cast_recall_or_sacred_journey (from core_spells.py)
def cast_recall_or_sacred_journey(

    # Time in milliseconds to wait IF we need to morph into
    # wraith form form for necro.
    shapeshiftDelayMs = 3000
):
    RUNEBOOK_GUMP_ID = 0x59
    #script_name = os.path.basename(__file__)
    script_name = getattr(__main__, "__file__", None) or sys.argv[0]
    rune = int(re.search(r"RecallOrSacredJourneyRune(\d+)\.py", script_name).group(1))
    magerySkill = Player.GetSkillValue("Magery")
    chivalrySkill = Player.GetSkillValue("Chivalry")
    necroSkill = Player.GetSkillValue("Necromancy")
    hasWraith = Player.BuffsExist("Wraith Form")
    hasVampire = Player.BuffsExist("Vampiric Embrace")

    # Magery Rune 1 = 50
    # Magery Rune 2 = 51
    # Chivalry Rune 1 = 75
    # Chivalry Rune 2 = 76
    # Defaults to magery if both magery and chivalry are 0 (pure necro)
    buttonId = 74 + rune if chivalrySkill > magerySkill else 49 + rune

    if magerySkill < 50 and chivalrySkill < 50 and necroSkill > 80:
        while not Player.BuffsExist("Wraith Form"):
            cast_spell("Wraith Form", None, 650)

    runebook = Items.FindByID(RUNEBOOK, -1, Player.Backpack.Serial, 0)
    if runebook is None:
        Misc.SendMessage("No runebook found. Must be in backpack.", 38)
        sys.exit()

    print(runebook)
    print(script_name)
    print("Magery Skill {}".format(magerySkill))
    print("Chivalry Skill {}".format(chivalrySkill))
    print("Necromancy Skill {}".format(necroSkill))
    print("Rune {}".format(rune))
    print("Button ID {}".format(buttonId))

    Items.UseItem(runebook)
    Gumps.WaitForGump(RUNEBOOK_GUMP_ID, 10000)
    Gumps.SendAction(RUNEBOOK_GUMP_ID, buttonId) 

    Misc.Pause(3000)

    if hasVampire and Player.BuffsExist("Wraith Form"):
        Spells.CastNecro("Vampiric Embrace")
    if not hasVampire and not hasWraith and Player.BuffsExist("Wraith Form"):
        Spells.CastNecro("Wraith Form")

# ===============================================
# Main Script Code
# ===============================================
# Finds first runebook in inventory and attempts to recall / sacred journey to 
# the rune indicated in the file name. File name must match this pattern for it to work:
# RecallOrSacredJourneyRune<NUMBER>.py where NUMBER is an integer starting at 1 (first rune in book)
# Will use sacred journey if chiv skill is present and higher than magery, otherwise uses recall.
# Only works with runebooks (not atlas). Picks the first runebook in backpack. If  you have multiple
# runebooks, good luck. Runebook must be in first layer of backpack.
# Also will cast wraith form if you are a necor without magery or chivalry.
# If player needs to cast wraith form, will automatically retun to whatever form they
# were in before enering wraith form (vampiric embrace /no form)
cast_recall_or_sacred_journey()
